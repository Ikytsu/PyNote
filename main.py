import customtkinter
from tkinter import filedialog ; from tkinter import messagebox ; from tkinter import LEFT, Y, BOTH, TOP, X
import os ; import io ; import argparse ; import configparser ; import json
import integrated_language



class App(customtkinter.CTk):
    def __init__(self):
        super().__init__()
        #check arguments
        self.debug = False
        parser = argparse.ArgumentParser()

        parser.add_argument("-config_folder_path", "--config_folder_path", help = "The program will use the config folder you give instead of the default one")
        parser.add_argument("-debug", "--debug", action="store_true" ,help = "Show program steps (useful for developpers)")

        args = parser.parse_args()

        if args.debug:
            self.debug = True

        if args.config_folder_path:
            if os.path.exists(args.config_folder_path):
                self.config_folder = args.config_folder_path
            else:
                print("Your config folder doesn't exist, reverting to the default one...")
                self.config_folder = 'config'
        else:
            self.config_folder = 'config'        

        self.debug_func("Initializing the window")

        self.geometry("500x300")
        self.title("Pynote")
        self.minsize(300, 200)
        self.grid_columnconfigure(0, weight=2)
        self.grid_rowconfigure(1, weight=1)
        self.grid_rowconfigure(2, weight=1)

        self.debug_func("setting up the variables for everything setting related")

        self.setting_file = os.path.join(self.config_folder, "settings.ini")
        self.translation_folder = os.path.join(self.config_folder, "translations")
        self.languages_dict = dict()

        self.get_languages_dict()

        self.debug_func("Checking if config exists or is valid")
        if os.path.exists(self.setting_file):
            config = configparser.ConfigParser()
            config.read(self.setting_file, encoding='utf-8')
            success = False
            try:
                self.language = config.get('Settings', 'language')
                if not self.language in list(self.languages_dict.keys()):
                    raise ValueError
                self.default_path = config.get('Settings', 'path')
                self.update_warning = config.getboolean('Settings', 'updatewarning')
                success = True
            except:
                self.debug_func("Failure: the config file exists but is not correct, loading the setup_gui")
                with open(self.setting_file, "w"):
                    pass
                config = configparser.ConfigParser()
                config.read(self.setting_file, encoding='utf-8')
                config.add_section("Settings")
                with open(self.setting_file, "w") as configfile:
                    configfile.write("; Do not edit this file without knowing what you are doing, it may result to bugs or unexpected behaviours\n")
                    config.write(configfile)
                self.warn(self.get_translation("warn.title.incorrect_settings"), self.get_translation("warn.description.incorrect_settings"))
                self.setup_gui(1)
            if success == True:
                self.debug_func("Success: loading the main_gui")
                self.main_gui()
        else:
            self.debug_func("Failure: the config file doesn't exist, loading the setup_gui")
            open(self.setting_file, "w").close()
            with open(self.setting_file, "w"):
                pass
            config = configparser.ConfigParser()
            config.read(self.setting_file)
            config.add_section("Settings")
            with open(self.setting_file, "w") as configfile:
                configfile.write("; Do not edit this file without knowing what you are doing, it may result to bugs or unexpected behaviours\n")
                config.write(configfile)
            self.setup_gui(1)
    
    def debug_func(self, debug_indication: str):
        if self.debug == True:
            print(debug_indication)

    def get_languages_dict(self):
        translation_files = [
            f for f in os.listdir(self.translation_folder)
            if os.path.isfile(os.path.join(self.translation_folder, f)) and f.endswith('.json')
        ]
        
        if translation_files:
            for file in translation_files:
                with open(os.path.join(self.translation_folder, file), 'r', encoding='utf-8') as file:
                    data = json.load(file)
                self.languages_dict[file.name] = data
        self.languages_dict["English"] = integrated_language.english_data

    def get_translation(self, key : str):
        try:
            language_data = self.languages_dict.get(self.language)
            keys = key.split(".")
            
            result = language_data
            for key_part in keys:
                result = result[key_part]
        except:
            language_data = self.languages_dict.get("English")
            keys = key.split(".")
            
            result = language_data
            for key_part in keys:
                result = result[key_part]
        return result
    
    def warn(self, title: str, message: str):
        messagebox.showwarning(title, message)
    
    def main_gui(self):
        self.nav_frame = customtkinter.CTkFrame(self, fg_color="#141517")
        self.nav_frame.pack(side=LEFT, fill=Y)
        self.top_frame= customtkinter.CTkFrame(self, fg_color="blue", height=40)
        self.top_frame.pack(side=TOP, fill=X)
        self.main = customtkinter.CTkFrame(self, corner_radius=0, fg_color="white")
        self.main.pack(fill=BOTH, expand=True)

    def setup_gui(self, step: int):
        def Add_Config(option : str, info):
            config = configparser.ConfigParser()
            config.read(self.setting_file, encoding='utf-8')
            config.set("Settings", option, str(info))
            s = io.StringIO()
            config.write(s)
            with open(self.setting_file, "w", encoding='utf-8') as configfile:
                configfile.write(s.getvalue())
        def Next_Button():
            if step == 1:
                info = self.combobox.get()
                self.combobox.destroy()
                Add_Config("language", info)
            elif step == 2:
                info = self.selected_var.get()
                if info == "":
                    self.warn(self.get_translation("warn.title.incorrect_option"), self.get_translation("warn.description.incorrect_option2"))
                    return
                self.select_button.destroy()
                self.text_label2.destroy()
                Add_Config("path", info)
            elif step == 3:
                info = self.check_var.get()
                self.text_label.destroy()
                self.checkbox.destroy()
                self.button.destroy()
                Add_Config("updatewarning", info)
            if step != 3: self.setup_gui(step + 1)
            else:  self.main_gui()   
        if step == 1:
            self.button = customtkinter.CTkButton(self, text=self.get_translation("setup.button"), command=Next_Button)
            self.button.grid(row=2, column=0, sticky="se")
        else:
            self.button.configure(command=Next_Button)
        if step == 1:
            def on_combobox_change(event):
                self.language = self.combobox.get()
                self.text_label.configure(text = self.get_translation("setup.option1.text_label"))
                self.button.configure(text=self.get_translation("setup.button"))
            self.text_label = customtkinter.CTkLabel(self, text="Choose your language:",  font=("Arial", 18))
            self.text_label.grid(row=1, column=0, sticky="nsew")
            self.combobox = customtkinter.CTkComboBox(master=self, values=list(self.languages_dict.keys()), state="readonly", command=on_combobox_change)
            self.combobox.grid(row=2, column=0, sticky="n")
            self.combobox.set("English")
        elif step == 2:
            def Choose_Directory():
                folder_path = filedialog.askdirectory()
                if folder_path:

                    self.text_label2.configure(text= self.get_translation("setup.option2.text_label2_selected") + ' ' + folder_path)
                    self.selected_var.set(folder_path)

            
            self.text_label.configure(text=self.get_translation("setup.option2.text_label"))
            self.selected_var = customtkinter.StringVar()
            self.selected_var.set("")
            self.select_button = customtkinter.CTkButton(self, text=self.get_translation("setup.option2.select_button"), command=Choose_Directory)
            self.select_button.grid(row=2, column=0, sticky="n")
            self.text_label2 = customtkinter.CTkLabel(self, text=self.get_translation("setup.option2.text_label2_notselected"),  font=("Arial", 18))
            self.text_label2.grid(row=2, column=0)

        elif step == 3:
            self.text_label.configure(self.get_translation("setup.option3.text_label"))
            self.check_var = customtkinter.BooleanVar()
            self.checkbox = customtkinter.CTkCheckBox(self, text="", variable=self.check_var)
            self.checkbox.grid(row=2, column=0, sticky="n")

            
    
app = App()
app.mainloop()
